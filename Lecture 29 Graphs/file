  public static void bfs(ArrayList<Edge>[]graph){
        boolean vis[]=new boolean[graph.length];
        for(int i-0;i<graph.length;i++){
            if(!vis[i]){
                bfsUtil(graph,vis);
            }
        }
    }

    public static  void bfsUtil(ArrayList<Edge>[]graph ,boolean vis[] ){ //TC O(V+e)
        Queue<Integer> q = new LinkedList<>();
        q.add(0); //source

        while(!q.isEmpty()){
            int curr=q.remove();

            if(!vis[curr]){
                System.out.print(curr+" ");
                vis[curr]=true;
                for(int i=0;i<graph[curr].size();i++){
                    Edge e = graph[curr].get(i);
                    q.add(e.dest);
                }
            }
        }
    }


        public static void dfs(ArrayList<Edge>[]graph){
        boolean vis[] = new boolean[graph.length];
        for(int i=0;i<graph.length;i++){
            dfsUtil(graph,i,vis);
        }
    }
     public static void dfsUtil(ArrayList<Edge>[] graph,int curr,boolean vis[]){ //O(V+E)
        System.out.print(curr+" ");
        vis[curr]=true;

        for(int i=0;i<graph[curr].size();i++){
            Edge e = graph[curr].get(i);
            if(!vis[e.dest]){
                dfs(graph,e.dest,vis);
            }
        }

    }